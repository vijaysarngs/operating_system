#include <stdio.h>

struct Process {
    int pid; 
    int burstTime;
    int waitingTime;  
    int turnaroundTime;  
};

void calculateTimes(struct Process processes[], int n) {
    processes[0].waitingTime = 0;  

    for (int i = 1; i < n; i++) {
        processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
    }
}

void displayResult(struct Process processes[], int n) {
    float totalWaitingTime = 0, totalTurnaroundTime = 0;

    // Displaying process details and calculating total waiting and turnaround times
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burstTime, processes[i].waitingTime, processes[i].turnaroundTime);
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }

    // Displaying average waiting time and average turnaround time
    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}

int main() {
    int n;  // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Taking input for burst times
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    calculateTimes(processes, n);  // Calculate waiting and turnaround times for each process
    displayResult(processes, n);  // Display the results

    return 0;
}
